{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vitor\\\\OneDrive\\\\Documentos\\\\automacao_fluxo_marketing\\\\automacao_fluxo_marketing\\\\job-management-frontend\\\\src\\\\JobList.js\",\n  _s = $RefreshSig$();\n// JobList.js\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Importa useNavigate\nimport Modal from './Modal';\nimport JobCard from './JobCard';\nimport './JobList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobList = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [editingJob, setEditingJob] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate(); // Inicializa o hook useNavigate\n\n  // Busca os jobs\n  useEffect(() => {\n    const fetchJobs = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('http://localhost:8000/api/jobs/');\n        if (!response.ok) throw new Error('Erro ao carregar jobs.');\n        const data = await response.json();\n        setJobs(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchJobs();\n  }, []);\n\n  // Exemplo simplificado do uso do modal para editar um job\n  const handleUpdate = async updatedJob => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/jobs/${updatedJob.id}/`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedJob) // Envia os dados atualizados\n      });\n      if (!response.ok) throw new Error('Erro ao atualizar job.');\n\n      // Atualiza a lista de jobs localmente ou busca novamente os jobs\n      setJobs(prevJobs => prevJobs.map(job => job.id === updatedJob.id ? updatedJob : job));\n      setEditingJob(null); // Fecha o modal após a atualização\n    } catch (err) {\n      console.error('Error updating job:', err.message);\n    }\n  };\n\n  // Função para arquivar um job\n  const handleArchive = async jobId => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/jobs/${jobId}/archive/`, {\n        method: 'PATCH'\n      });\n      if (!response.ok) throw new Error('Erro ao arquivar job.');\n\n      // Redireciona para a página de jobs arquivados\n      navigate('/archived-jobs'); // Redireciona após arquivar\n    } catch (err) {\n      console.error('Error archiving job:', err.message);\n    }\n  };\n\n  // Função para ordenar jobs por status\n  const sortJobsByStatus = jobs => {\n    const order = {\n      pending: 1,\n      approved: 2,\n      rejected: 3\n    };\n    return jobs.sort((a, b) => order[a.status] - order[b.status]);\n  };\n\n  // Renderiza conteúdo baseado no estado\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Carregando jobs...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Erro: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 21\n  }, this);\n\n  // Ordena os jobs antes de renderizar\n  const sortedJobs = sortJobsByStatus(jobs);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"job-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lista de Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-list\",\n      children: sortedJobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n        job: job,\n        onEdit: () => setEditingJob(job),\n        onArchive: () => handleArchive(job.id) // Passa a função de arquivar para o JobCard\n      }, job.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), editingJob && /*#__PURE__*/_jsxDEV(Modal, {\n      job: editingJob,\n      onClose: () => setEditingJob(null),\n      onUpdate: () => {/* Lógica para atualizar */},\n      onDelete: () => {/* Lógica para deletar */} // Se você tiver essa funcionalidade\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(JobList, \"vgJFicWZGdMXh4YVPnmTbC09qrc=\", false, function () {\n  return [useNavigate];\n});\n_c = JobList;\nexport default JobList;\nvar _c;\n$RefreshReg$(_c, \"JobList\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Modal","JobCard","jsxDEV","_jsxDEV","JobList","_s","jobs","setJobs","editingJob","setEditingJob","loading","setLoading","error","setError","navigate","fetchJobs","response","fetch","ok","Error","data","json","err","message","handleUpdate","updatedJob","id","method","headers","body","JSON","stringify","prevJobs","map","job","console","handleArchive","jobId","sortJobsByStatus","order","pending","approved","rejected","sort","a","b","status","children","fileName","_jsxFileName","lineNumber","columnNumber","sortedJobs","className","onEdit","onArchive","onClose","onUpdate","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/vitor/OneDrive/Documentos/automacao_fluxo_marketing/automacao_fluxo_marketing/job-management-frontend/src/JobList.js"],"sourcesContent":["// JobList.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // Importa useNavigate\r\nimport Modal from './Modal';\r\nimport JobCard from './JobCard'; \r\nimport './JobList.css'; \r\n\r\nconst JobList = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [editingJob, setEditingJob] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate(); // Inicializa o hook useNavigate\r\n\r\n  // Busca os jobs\r\n  useEffect(() => {\r\n    const fetchJobs = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await fetch('http://localhost:8000/api/jobs/');\r\n        if (!response.ok) throw new Error('Erro ao carregar jobs.');\r\n        \r\n        const data = await response.json();\r\n        setJobs(data);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchJobs();\r\n  }, []);\r\n\r\n  // Exemplo simplificado do uso do modal para editar um job\r\nconst handleUpdate = async (updatedJob) => {\r\n  try {\r\n      const response = await fetch(`http://localhost:8000/api/jobs/${updatedJob.id}/`, {\r\n          method: 'PATCH',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(updatedJob), // Envia os dados atualizados\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Erro ao atualizar job.');\r\n\r\n      // Atualiza a lista de jobs localmente ou busca novamente os jobs\r\n      setJobs((prevJobs) =>\r\n          prevJobs.map((job) => (job.id === updatedJob.id ? updatedJob : job))\r\n      );\r\n\r\n      setEditingJob(null); // Fecha o modal após a atualização\r\n  } catch (err) {\r\n      console.error('Error updating job:', err.message);\r\n  }\r\n};\r\n\r\n\r\n  // Função para arquivar um job\r\nconst handleArchive = async (jobId) => {\r\n  try {\r\n      const response = await fetch(`http://localhost:8000/api/jobs/${jobId}/archive/`, {\r\n          method: 'PATCH',\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Erro ao arquivar job.');\r\n\r\n      // Redireciona para a página de jobs arquivados\r\n      navigate('/archived-jobs'); // Redireciona após arquivar\r\n  } catch (err) {\r\n      console.error('Error archiving job:', err.message);\r\n  }\r\n};\r\n\r\n  // Função para ordenar jobs por status\r\n  const sortJobsByStatus = (jobs) => {\r\n    const order = { pending: 1, approved: 2, rejected: 3 };\r\n    return jobs.sort((a, b) => order[a.status] - order[b.status]);\r\n  };\r\n\r\n  // Renderiza conteúdo baseado no estado\r\n  if (loading) return <div>Carregando jobs...</div>;\r\n  if (error) return <div>Erro: {error}</div>;\r\n\r\n  // Ordena os jobs antes de renderizar\r\n  const sortedJobs = sortJobsByStatus(jobs);\r\n\r\n  return (\r\n    <div className=\"job-list-container\">\r\n      <h1>Lista de Jobs</h1>\r\n      <div className=\"job-list\">\r\n        {sortedJobs.map((job) => (\r\n          <JobCard\r\n            key={job.id}\r\n            job={job}\r\n            onEdit={() => setEditingJob(job)}\r\n            onArchive={() => handleArchive(job.id)} // Passa a função de arquivar para o JobCard\r\n          />\r\n        ))}\r\n      </div>\r\n      {editingJob && (\r\n        <Modal\r\n          job={editingJob}\r\n          onClose={() => setEditingJob(null)}\r\n          onUpdate={() => {/* Lógica para atualizar */}}\r\n          onDelete={() => {/* Lógica para deletar */}} // Se você tiver essa funcionalidade\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}