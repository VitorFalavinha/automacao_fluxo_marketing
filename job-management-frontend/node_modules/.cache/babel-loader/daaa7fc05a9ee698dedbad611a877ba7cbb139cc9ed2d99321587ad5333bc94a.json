{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vitor\\\\OneDrive\\\\Documentos\\\\automacao_fluxo_marketing\\\\automacao_fluxo_marketing\\\\job-management-frontend\\\\src\\\\JobList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Modal from './Modal';\nimport JobCard from './JobCard';\nimport './JobList.css';\nimport BackButton from './components/BackButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobList = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [editingJob, setEditingJob] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Busca os jobs e ordena por status\n  useEffect(() => {\n    const fetchJobs = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('http://localhost:8000/api/jobs/');\n        if (!response.ok) throw new Error('Erro ao carregar jobs.');\n        const data = await response.json();\n        const sortedJobs = data.sort((a, b) => {\n          const order = {\n            pending: 1,\n            approved: 2,\n            rejected: 0\n          };\n          return order[a.status] - order[b.status];\n        });\n        setJobs(sortedJobs);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchJobs();\n  }, []);\n\n  // Atualiza job na API e no estado local\n  const handleUpdate = async updatedJob => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/jobs/${updatedJob.id}/`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedJob)\n      });\n      if (!response.ok) throw new Error('Erro ao atualizar job.');\n      const job = await response.json();\n      setJobs(prevJobs => prevJobs.map(j => j.id === job.id ? job : j));\n      setEditingJob(null); // Fecha o modal\n    } catch (err) {\n      console.error('Error updating job:', err.message);\n    }\n  };\n\n  // Renderiza conteúdo baseado no estado\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Carregando jobs...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Erro: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BackButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Lista de Jobs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-list\",\n        children: jobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n          job: job,\n          onEdit: () => setEditingJob(job),\n          className: job.status === 'pending' ? 'bg-pending' : job.status === 'approved' ? 'bg-approved' : 'bg-rejected'\n        }, job.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), editingJob && /*#__PURE__*/_jsxDEV(Modal, {\n        job: editingJob,\n        onClose: () => setEditingJob(null),\n        onUpdate: handleUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(JobList, \"q7Qs2uCRd45mnigYGRqiudnel/w=\");\n_c = JobList;\nexport default JobList;\nvar _c;\n$RefreshReg$(_c, \"JobList\");","map":{"version":3,"names":["React","useState","useEffect","Modal","JobCard","BackButton","jsxDEV","_jsxDEV","JobList","_s","jobs","setJobs","editingJob","setEditingJob","loading","setLoading","error","setError","fetchJobs","response","fetch","ok","Error","data","json","sortedJobs","sort","a","b","order","pending","approved","rejected","status","err","message","handleUpdate","updatedJob","id","method","headers","body","JSON","stringify","job","prevJobs","map","j","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onEdit","onClose","onUpdate","_c","$RefreshReg$"],"sources":["C:/Users/vitor/OneDrive/Documentos/automacao_fluxo_marketing/automacao_fluxo_marketing/job-management-frontend/src/JobList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Modal from './Modal';\r\nimport JobCard from './JobCard'; \r\nimport './JobList.css'; \r\nimport BackButton from './components/BackButton';\r\n\r\nconst JobList = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [editingJob, setEditingJob] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n\r\n  \r\n\r\n  // Busca os jobs e ordena por status\r\n  useEffect(() => {\r\n    const fetchJobs = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await fetch('http://localhost:8000/api/jobs/');\r\n        if (!response.ok) throw new Error('Erro ao carregar jobs.');\r\n        \r\n        const data = await response.json();\r\n        const sortedJobs = data.sort((a, b) => {\r\n          const order = { pending: 1, approved: 2, rejected: 0 };\r\n          return order[a.status] - order[b.status];\r\n        });\r\n        setJobs(sortedJobs);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchJobs();\r\n  }, []);\r\n\r\n  \r\n  // Atualiza job na API e no estado local\r\n  const handleUpdate = async (updatedJob) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/api/jobs/${updatedJob.id}/`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(updatedJob),\r\n      });\r\n      if (!response.ok) throw new Error('Erro ao atualizar job.');\r\n\r\n      const job = await response.json();\r\n      setJobs((prevJobs) =>\r\n        prevJobs.map((j) => (j.id === job.id ? job : j))\r\n      );\r\n      setEditingJob(null); // Fecha o modal\r\n    } catch (err) {\r\n      console.error('Error updating job:', err.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  // Renderiza conteúdo baseado no estado\r\n  if (loading) return <div>Carregando jobs...</div>;\r\n  if (error) return <div>Erro: {error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <BackButton />\r\n      <div className=\"job-list-container\">\r\n        <h1>Lista de Jobs</h1>\r\n        <div className=\"job-list\">\r\n          {jobs.map((job) => (\r\n            <JobCard\r\n              key={job.id}\r\n              job={job}\r\n              onEdit={() => setEditingJob(job)}\r\n              className={\r\n                job.status === 'pending' \r\n                  ? 'bg-pending' \r\n                  : job.status === 'approved' \r\n                  ? 'bg-approved' \r\n                  : 'bg-rejected'\r\n              }\r\n            />\r\n          ))}\r\n        </div>\r\n        {editingJob && (\r\n          <Modal\r\n            job={editingJob}\r\n            onClose={() => setEditingJob(null)}\r\n            onUpdate={handleUpdate}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}