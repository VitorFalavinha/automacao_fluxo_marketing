{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vitor\\\\job-management-frontend\\\\src\\\\JobList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './JobList.css';\nimport Modal from './Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobList = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [editingJob, setEditingJob] = useState(null);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [client, setClient] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  useEffect(() => {\n    fetch('http://localhost:8000/api/jobs/').then(response => response.json()).then(data => {\n      setJobs(data);\n    }).catch(error => console.error('Error fetching jobs:', error));\n  }, []);\n  const handleEdit = job => {\n    setEditingJob(job);\n    setTitle(job.title);\n    setDescription(job.description);\n    setClient(job.client);\n    setIsModalOpen(true);\n  };\n  const handleDelete = id => {\n    fetch(`http://localhost:8000/api/jobs/${id}/`, {\n      method: 'DELETE'\n    }).then(() => {\n      const remainingJobs = jobs.filter(job => job.id !== id);\n      setJobs(remainingJobs);\n    }).catch(error => console.error('Error deleting job:', error));\n  };\n  const handleUpdate = updatedJob => {\n    fetch(`http://localhost:8000/api/jobs/${updatedJob.id}/`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedJob) // Usa o objeto atualizado que inclui o status\n    }).then(response => response.json()).then(job => {\n      const updatedJobs = jobs.map(j => j.id === job.id ? job : j);\n      setJobs(updatedJobs);\n    }).catch(error => console.error('Error updating job:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Jobs List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: jobs.map(job => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [job.title, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleEdit(job),\n            children: \"Editar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDelete(job.id),\n            children: \"Deletar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, job.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: () => setIsModalOpen(false),\n      onSave: handleUpdate,\n      job: editingJob\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(JobList, \"okYUP5FvSPzzH1RC7e1kOsQ7wtc=\");\n_c = JobList;\nexport default JobList;\nvar _c;\n$RefreshReg$(_c, \"JobList\");","map":{"version":3,"names":["React","useState","useEffect","Modal","jsxDEV","_jsxDEV","JobList","_s","jobs","setJobs","editingJob","setEditingJob","title","setTitle","description","setDescription","client","setClient","isModalOpen","setIsModalOpen","fetch","then","response","json","data","catch","error","console","handleEdit","job","handleDelete","id","method","remainingJobs","filter","handleUpdate","updatedJob","headers","body","JSON","stringify","updatedJobs","map","j","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","isOpen","onClose","onSave","_c","$RefreshReg$"],"sources":["C:/Users/vitor/job-management-frontend/src/JobList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './JobList.css';\r\nimport Modal from './Modal';\r\n\r\nconst JobList = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [editingJob, setEditingJob] = useState(null);\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [client, setClient] = useState('');\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:8000/api/jobs/')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setJobs(data);\r\n      })\r\n      .catch(error => console.error('Error fetching jobs:', error));\r\n  }, []);\r\n\r\n  const handleEdit = (job) => {\r\n    setEditingJob(job);\r\n    setTitle(job.title);\r\n    setDescription(job.description);\r\n    setClient(job.client);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    fetch(`http://localhost:8000/api/jobs/${id}/`, {\r\n      method: 'DELETE',\r\n    })\r\n      .then(() => {\r\n        const remainingJobs = jobs.filter(job => job.id !== id);\r\n        setJobs(remainingJobs);\r\n      })\r\n      .catch(error => console.error('Error deleting job:', error));\r\n  };\r\n\r\n  const handleUpdate = (updatedJob) => {\r\n  fetch(`http://localhost:8000/api/jobs/${updatedJob.id}/`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(updatedJob), // Usa o objeto atualizado que inclui o status\r\n  })\r\n  .then(response => response.json())\r\n  .then((job) => {\r\n    const updatedJobs = jobs.map(j => (j.id === job.id ? job : j));\r\n    setJobs(updatedJobs);\r\n  })\r\n  .catch(error => console.error('Error updating job:', error));\r\n};\r\n\r\n  return (\r\n    <div>\r\n      <h1>Jobs List</h1>\r\n      <ul>\r\n        {jobs.map((job) => (\r\n          <li key={job.id}>\r\n            {job.title}\r\n            <div className=\"button-container\">\r\n              <button onClick={() => handleEdit(job)}>Editar</button>\r\n              <button onClick={() => handleDelete(job.id)}>Deletar</button>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        onClose={() => setIsModalOpen(false)}\r\n        onSave={handleUpdate}\r\n        job={editingJob}\r\n        \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}